{"version":3,"sources":["Component/WorldMap/world2.svg","Component/Layout/Container.js","Component/CountUpCard/CountUpCard.js","Component/CountUpCard/CountUpCards.js","utils/numberformatter.js","Component/Table/CustomTable.js","utils/storeFunctions.js","utils/countrieshashmap.js","utils/arraysorter.js","Page/MainPage/MainPage.js","Page/MainPage/useFetch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyComponent","prop","Container","children","CountUpCard","start","end","header","decimals","prefix","Card","className","CardTitle","CardText","duration","separator","decimal","CountUpCards","useState","state","setState","isLoading","setLoading","useEffect","Axios","get","then","response","data","catch","error","console","log","Col","sm","md","lg","deaths","value","recovered","confirmed","thousands_separators","num","seperator","num_parts","toString","split","replace","join","CustomTable","isError","dataEdited","filter","country","confirmedCount","deathsCount","recoveredCount","Table","dark","hover","responsive","map","item","index","key","scope","storeReducer","action","type","payload","initialState","actionTypes","countriesHashmapReducer","acc","cv","name","dataHandler","apiData","hashmap","resultArr","Array","Object","keys","length","fill","u","i","forEach","info","countryName","countryRegion","obj","el","iso3","iso2","arraySorter","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","confirmState","url","useReducer","dispatch","countriesReq","countryHashmap","countries","reduce","resConfirmed","resRecovered","dataFromConfirmed","dataFromRecovered","countriesCount","country1","country2","Math","max","sort","fetchData","useFetch","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.acde6c49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world2.e2302406.svg\";","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nexport default function MyComponent(prop) {\n\treturn <Container>{prop.children}</Container>;\n}\n","import CountUp from \"react-countup\";\nimport React from \"react\";\nimport { Card, CardText, CardTitle } from \"reactstrap\";\n\nexport default function CountUpCard({\n\tstart,\n\tend,\n\theader,\n\tdecimals = 0,\n\tprefix,\n}) {\n\treturn (\n\t\t<Card className=\"border-light text-white bg-info\">\n\t\t\t<CardTitle className=\"text-uppercase\"> {header}</CardTitle>\n\t\t\t<CardText className=\"mb-2\">\n\t\t\t\t<CountUp\n\t\t\t\t\tstart={start}\n\t\t\t\t\tend={end}\n\t\t\t\t\tduration={0.75}\n\t\t\t\t\tdecimals={decimals}\n\t\t\t\t\tprefix={prefix}\n\t\t\t\t\tseparator=\".\"\n\t\t\t\t\tdecimal=\",\"\n\t\t\t\t></CountUp>\n\t\t\t</CardText>\n\t\t</Card>\n\t);\n\t// return <div>hi form c u</div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Col } from \"reactstrap\";\nimport CountUpCard from \"./CountUpCard\";\nimport Axios from \"axios\";\n\nexport default function CountUpCards() {\n\tconst [state, setState] = useState();\n\tconst [isLoading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tAxios.get(\"https://covid19.mathdro.id/api/\")\n\t\t\t.then(function (response) {\n\t\t\t\t// handle success\n\t\t\t\tsetState(response.data);\n\t\t\t\tsetLoading(false);\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\t// handle error\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\t//\n\t\t\t});\n\n\t\treturn () => {};\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// console.log(state);\n\t}, [state]);\n\n\tif (isLoading) {\n\t\treturn <p> loading</p>;\n\t} else {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Col sm=\"12\" md=\"6\" lg=\"3\">\n\t\t\t\t\t<CountUpCard\n\t\t\t\t\t\tstart={0}\n\t\t\t\t\t\tend={state.deaths.value}\n\t\t\t\t\t\theader=\"deaths\"\n\t\t\t\t\t></CountUpCard>\n\t\t\t\t</Col>\n\t\t\t\t<Col sm=\"12\" md=\"6\" lg=\"3\">\n\t\t\t\t\t<CountUpCard\n\t\t\t\t\t\tstart={0}\n\t\t\t\t\t\tend={state.recovered.value}\n\t\t\t\t\t\theader=\"recovered\"\n\t\t\t\t\t></CountUpCard>\n\t\t\t\t</Col>\n\t\t\t\t<Col sm=\"12\" md=\"6\" lg=\"3\">\n\t\t\t\t\t<CountUpCard\n\t\t\t\t\t\tstart={0}\n\t\t\t\t\t\tend={state.confirmed.value}\n\t\t\t\t\t\theader=\"confirmed\"\n\t\t\t\t\t></CountUpCard>\n\t\t\t\t</Col>\n\t\t\t\t<Col sm=\"12\" md=\"6\" lg=\"3\">\n\t\t\t\t\t<CountUpCard\n\t\t\t\t\t\tstart={0}\n\t\t\t\t\t\tend={\n\t\t\t\t\t\t\t(100 * state.deaths.value) /\n\t\t\t\t\t\t\t(state.recovered.value + state.deaths.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// decimal=3\n\t\t\t\t\t\t// olarak ayarla\n\t\t\t\t\t\t// separate ayarla.\n\t\t\t\t\t\theader=\"Death Rate\"\n\t\t\t\t\t\tdecimals={2}\n\t\t\t\t\t\tprefix=\"%\"\n\t\t\t\t\t></CountUpCard>\n\t\t\t\t</Col>\n\t\t\t</>\n\t\t);\n\t}\n}\n","// function thousands_separators(num, seperator = \",\") {\nconst thousands_separators = (num, seperator = \",\") => {\n\tconst num_parts = num.toString().split(\".\");\n\tnum_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, seperator);\n\treturn num_parts.join(\".\");\n};\n\nexport default thousands_separators;\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\n\nimport thousands_separators from \"../../utils/numberformatter\";\n\nconst CustomTable = ({ isLoading, isError, data }) => {\n\tif (isLoading) {\n\t\treturn <div>loading table</div>;\n\t}\n\tif (isError) {\n\t\treturn <div> There is error in Store or API </div>;\n\t}\n\tconst dataEdited =\n\t\tdata &&\n\t\tdata.filter(\n\t\t\t(country) =>\n\t\t\t\tcountry.confirmedCount + country.deathsCount + country.recoveredCount >\n\t\t\t\t150\n\t\t);\n\n\treturn (\n\t\t<Table dark hover responsive>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>#</th>\n\t\t\t\t\t<th>COUNTRIES</th>\n\t\t\t\t\t<th>CONFIRMED</th>\n\t\t\t\t\t<th>DEATHS</th>\n\t\t\t\t\t<th>RECOVERED</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{data &&\n\t\t\t\t\tdataEdited.map((item, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={item.country}>\n\t\t\t\t\t\t\t\t<th scope=\"row\">{index + 1}</th>\n\t\t\t\t\t\t\t\t<td>{item.country}</td>\n\t\t\t\t\t\t\t\t<td>{thousands_separators(item.confirmedCount, \".\")}</td>\n\t\t\t\t\t\t\t\t<td>{thousands_separators(item.deathsCount, \".\")}</td>\n\t\t\t\t\t\t\t\t<td>{thousands_separators(item.recoveredCount, \".\")}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nexport default CustomTable;\n","export const storeReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase \"FECTHING_INIT\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true,\n\t\t\t\tisError: false,\n\t\t\t};\n\t\tcase \"FECTHING_SUCCESS\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: false,\n\t\t\t\tdata: action.payload,\n\t\t\t};\n\t\tcase \"FECTHING_FAILURE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: true,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t\t// throw new Error(\"11 reducer default case error\");\n\t}\n};\n\nexport const initialState = {\n\tisLoading: false,\n\tisError: false,\n\tdata: \"\",\n};\n\nexport const actionTypes = {\n\tinit: \"FECTHING_INIT\",\n\tsuccess: \"FECTHING_SUCCESS\",\n\tfail: \"FECTHING_FAILURE\",\n};\n","export const countriesHashmapReducer = (acc, cv, index) => {\n\tacc[cv.name] = index;\n\treturn acc;\n};\n\nexport const dataHandler = (apiData, hashmap) => {\n\tconst resultArr = new Array(Object.keys(hashmap).length)\n\t\t.fill(null)\n\t\t.map((u, i) => {\n\t\t\treturn {\n\t\t\t\tcountry: \"\",\n\t\t\t\tconfirmedCount: 0,\n\t\t\t\tdeathsCount: 0,\n\t\t\t\trecoveredCount: 0,\n\t\t\t};\n\t\t});\n\n\tapiData.forEach((info) => {\n\t\tlet countryName = info.countryRegion;\n\t\tlet obj = resultArr[hashmap[countryName]];\n\n\t\t[\"confirmed\", \"recovered\", \"deaths\"].forEach((el) => {\n\t\t\tinfo[el] && (obj[el + \"Count\"] += info[el]);\n\n\t\t\t// TODO ulke bilgilerini svg map icin lazim olacak.\n\t\t\tif (!obj.country) {\n\t\t\t\tobj.country = countryName;\n\t\t\t\tobj.iso3 = info.iso3;\n\t\t\t\tobj.iso2 = info.iso2;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn resultArr;\n};\n","const arraySorter = (key, order = \"asc\") => {\n\treturn function innerSort(a, b) {\n\t\tif (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n\t\t\t// property doesn't exist on either object\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst varA = typeof a[key] === \"string\" ? a[key].toUpperCase() : a[key];\n\t\tconst varB = typeof b[key] === \"string\" ? b[key].toUpperCase() : b[key];\n\n\t\tlet comparison = 0;\n\t\tif (varA > varB) {\n\t\t\tcomparison = 1;\n\t\t} else if (varA < varB) {\n\t\t\tcomparison = -1;\n\t\t}\n\t\treturn order === \"desc\" ? comparison * -1 : comparison;\n\t};\n};\n\nexport default arraySorter;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport CountUpCards from \"../../Component/CountUpCard/CountUpCards\";\nimport WorldMap from \"../../Component/WorldMap/WorldMapSVG\";\nimport CustomTable from \"../../Component/Table/CustomTable\";\nimport useFetch from \"./useFetch\";\n\nexport default function MyComponent(prop) {\n\t// FIXME is url not neccesary?\n\tconst url = `https://covid19.mathdro.id/api/confirmed`;\n\tconst confirmState = useFetch(url);\n\n\treturn (\n\t\t<>\n\t\t\t<Row className=\"mb-4\">{/* bosluk icin  */}</Row>\n\t\t\t<Row className=\"text-center \">\n\t\t\t\t<CountUpCards></CountUpCards>\n\t\t\t\t<Col sm=\"12\" md=\"12\" lg=\"12\" className=\"map py-3\">\n\t\t\t\t\t{/* <WorldMap></WorldMap> */}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t{/* <Col sm=\"12\" md=\"12\" lg=\"12\" className=\"list-item\"> */}\n\t\t\t\t<CustomTable {...confirmState}></CustomTable>\n\t\t\t\t{/* </Col> */}\n\t\t\t</Row>\n\t\t\t<Row className=\"mb-4\"></Row>\n\t\t\t{/* <JustTable {...confirmState} /> */}\n\t\t\t{/* <JustTable data={data} isLoading={isLoading} isError={isError} /> */}\n\t\t</>\n\t);\n}\n","import { useEffect, useReducer } from \"react\";\nimport Axios from \"axios\";\nimport { arraySorter, countriesHashmapReducer, dataHandler } from \"../../utils\";\nimport { storeReducer, initialState, actionTypes } from \"../../utils\";\n\nexport default function useFetch(url) {\n\tconst [state, dispatch] = useReducer(storeReducer, initialState);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tdispatch({ type: actionTypes.init });\n\n\t\t\ttry {\n\t\t\t\tconst countriesReq = await Axios.get(\n\t\t\t\t\t`https://covid19.mathdro.id/api/countries/`\n\t\t\t\t);\n\t\t\t\tconst countryHashmap = countriesReq.data.countries.reduce(\n\t\t\t\t\tcountriesHashmapReducer,\n\t\t\t\t\t{}\n\t\t\t\t);\n\n\t\t\t\t// there are 2 requests because of issue #1 in README.md\n\t\t\t\tconst resConfirmed = await Axios.get(\n\t\t\t\t\t`https://covid19.mathdro.id/api/confirmed`\n\t\t\t\t);\n\t\t\t\tconst resRecovered = await Axios.get(\n\t\t\t\t\t\"https://covid19.mathdro.id/api/recovered\"\n\t\t\t\t);\n\n\t\t\t\tconst dataFromConfirmed = dataHandler(\n\t\t\t\t\tresConfirmed.data,\n\t\t\t\t\tcountryHashmap\n\t\t\t\t);\n\t\t\t\t// some country entry is 0 because of issue #2 in README.md\n\t\t\t\tconst dataFromRecovered = dataHandler(\n\t\t\t\t\tresRecovered.data,\n\t\t\t\t\tcountryHashmap\n\t\t\t\t);\n\n\t\t\t\t// union\n\t\t\t\tconst countriesCount = dataFromConfirmed.map((country1, index) => {\n\t\t\t\t\tconst country2 = dataFromRecovered[index];\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...country1,\n\t\t\t\t\t\tconfirmedCount: Math.max(\n\t\t\t\t\t\t\tcountry1.confirmedCount,\n\t\t\t\t\t\t\tcountry2.confirmedCount\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdeathsCount: Math.max(country2.deathsCount, country1.deathsCount),\n\t\t\t\t\t\trecoveredCount: Math.max(\n\t\t\t\t\t\t\tcountry1.recoveredCount,\n\t\t\t\t\t\t\tcountry2.recoveredCount\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tcountriesCount.sort(arraySorter(\"confirmedCount\", \"desc\"));\n\t\t\t\tdispatch({ type: actionTypes.success, payload: countriesCount });\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tdispatch({ type: actionTypes.fail });\n\t\t\t}\n\t\t};\n\t\tfetchData();\n\t}, [url]);\n\treturn { ...state };\n}\n","import React from \"react\";\n// import MyComponent from \"./Component/MyComponent\";\nimport Container from \"./Component/Layout/Container\";\nimport MainPage from \"./Page/MainPage/MainPage\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<Container>\n\t\t\t<MainPage>{/* <MyComponent></MyComponent> */}</MainPage>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}